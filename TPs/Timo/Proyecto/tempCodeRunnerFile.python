import numpy as np
import matplotlib.pyplot as plt

def create_phantom(size, density):
  """Creates a phantom of the given size and density."""
  phantom = np.zeros((size, size), dtype=np.float32)
  for i in range(size):
    for j in range(size):
      phantom[i, j] = density
  return phantom

def project(phantom, angles):
  """Projects the phantom onto the given angles."""
  sinogram = np.zeros(angles.shape, dtype=np.float32)
  for i in range(angles.shape[0]):
    sinogram[i] = np.sum(phantom * np.exp(1j * angles[i] * np.arange(phantom.shape[0])))
  return sinogram

def reconstruct(sinogram, angles, iterations):
  """Reconstructs the phantom from the given sinogram and angles using an iterative process."""
  phantom = np.zeros(sinogram.shape, dtype=np.float32)
  for i in range(iterations):
    phantom = phantom + np.conj(sinogram) / np.sum(np.conj(sinogram) * np.exp(-1j * angles * np.arange(phantom.shape[0])))
  return phantom

def main():
  # Create the phantom.
  size = 128
  density = 0.5
  phantom = create_phantom(size, density)

  # Project the phantom.
  angles = np.linspace(0, 2 * np.pi, size)
  sinogram = project(phantom, angles)

  # Reconstruct the phantom.
  iterations = 100
  reconstructed_phantom = reconstruct(sinogram, angles, iterations)

  # Plot the sinogram and the reconstructed phantom.
  plt.subplot(121)
  plt.plot(angles, sinogram)
  plt.title('Sinogram')

  plt.subplot(122)
  plt.imshow(reconstructed_phantom, cmap='gray')
  plt.title('Reconstructed Phantom')

  plt.show()

if __name__ == '__main__':
  main()

